syntax = 'proto3';

package v1;

message File {
    string name = 1;
    
    bytes content = 2;
}

message TypeMeta {
  string kind = 1;

  string apiVersion = 2;
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create.
message ObjectMeta {
   string name = 1;

   string generateName = 2;

   string namespace = 3;
   
   string selfLink = 4;
   
   string uid = 5;
   
   string resourceVersion = 6;
   
   int64 generation = 7;
   
   Time creationTimestamp = 8;
   
   Time deletionTimestamp = 9;
   
   int64 deletionGracePeriodSeconds = 10;
   
   map<string, string> labels = 11;
   
   map<string, string> annotations = 12;

   repeated OwnerReference ownerReferences = 13;
  
   // +patchStrategy=merge
   repeated string finalizers = 14;
   
   string clusterName = 15;
  
   repeated ManagedFieldsEntry managedFields = 17;
}

// OwnerReference contains enough information to let you identify an owning
// object. An owning object must be in the same namespace as the dependent, or
// be cluster-scoped, so there is no namespace field.
message OwnerReference {
  // API version of the referent.
   string apiVersion = 5;

  // Kind of the referent.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   string kind = 1;

  // Name of the referent.
  // More info: http://kubernetes.io/docs/user-guide/identifiers#names
   string name = 3;

  // UID of the referent.
  // More info: http://kubernetes.io/docs/user-guide/identifiers#uids
   string uid = 4;

  // If true, this reference points to the managing controller.
  // +
   bool controller = 6;

  // If true, AND if the owner has the "foregroundDeletion" finalizer, then
  // the owner cannot be deleted from the key-value store until this
  // reference is removed.
  // Defaults to false.
  // To set this field, a user needs "delete" permission of the owner,
  // otherwise 422 (Unprocessable Entity) will be returned.
  // +
   bool blockOwnerDeletion = 7;
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource
// that the fieldset applies to.
message ManagedFieldsEntry {
  // Manager is an identifier of the workflow managing these fields.
   string manager = 1;

  // Operation is the type of operation which lead to this ManagedFieldsEntry being created.
  // The only valid values for this field are 'Apply' and 'Update'.
   string operation = 2;

  // APIVersion defines the version of this resource that this field set
  // applies to. The format is "group/version" just like the top-level
  // APIVersion field. It is necessary to track the version of a field
  // set because it cannot be automatically converted.
   string apiVersion = 3;

  // Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
  // +
   Time time = 4;

  // Fields identifies a set of fields.
  // +
   Fields fields = 5;
}

// Time is a wrapper around time.Time which supports correct
// marshaling to YAML and JSON.  Wrappers are provided for many
// of the factory methods that the time package offers.
//
// +protobuf.options.marshal=false
// +protobuf.as=Timestamp
// +protobuf.options.(gogoproto.goproto_stringer)=false
message Time {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
   int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive. This field may be limited in precision depending on context.
   int32 nanos = 2;
}

// Fields stores a set of fields in a data structure like a Trie.
// To understand how this is used, see: https://github.com/kubernetes-sigs/structured-merge-diff
message Fields {
  // Map stores a set of fields in a data structure like a Trie.
  //
  // Each key is either a '.' representing the field itself, and will always map to an empty set,
  // or a string representing a sub-field or item. The string will follow one of these four formats:
  // 'f:<name>', where <name> is the name of a field in a struct, or key in a map
  // 'v:<value>', where <value> is the exact json formatted value of a list item
  // 'i:<index>', where <index> is position of a item in a list
  // 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values
  // If a key maps to an empty Fields value, the field that key represents is part of the set.
  //
  // The exact format is defined in k8s.io/apiserver/pkg/endpoints/handlers/fieldmanager/internal
  map<string, Fields> map = 1;
}

message KubernetesClusterSpec {
    Cluster cluster = 1;
    
    Addons addons = 2;
}

message Cluster {
    string timeoutMins = 1;
    
    string clusterType = 2;
    
    string podCIDR = 3;
    
    string serviceCIDR = 4;
    
    repeated Node masterList = 5;
    
    string externalLoadBalancer = 6;
    
    repeated Node nodeList = 7;
    
    repeated Node etcdList = 8;
    
    string region = 9;
    
    AuthConfig authConfig = 10;
    
    string kubeVersion = 11;
}

message Addons {

}

message Node {
    string ip = 1;
}

message AuthConfig {
    string username = 1;
    
    string password = 2;
    
    string privateSSHKey = 3;
}


message KubernetesClusterRequest { 
    TypeMeta typeMeta = 1;
    
    ObjectMeta objectMeta = 2;
    
    KubernetesClusterSpec spec = 3;
}

message InstallClusterResponse {
    bool Success = 1;
}

service Installer {
    // copy file
    rpc CopyFile(File) returns (stream File){}
   
    // dispatch cluster config to all agent 
    rpc InstallCluster(stream KubernetesClusterRequest) returns (InstallClusterResponse) {} 
}
