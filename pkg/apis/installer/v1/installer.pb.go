// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/installer.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type File struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60e6fb022841b57, []int{0}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*File)(nil), "proto.File")
}

func init() { proto.RegisterFile("v1/installer.proto", fileDescriptor_f60e6fb022841b57) }

var fileDescriptor_f60e6fb022841b57 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x33, 0xd4, 0xcf,
	0xcc, 0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x53, 0x4a, 0x26, 0x5c, 0x2c, 0x6e, 0x99, 0x39, 0xa9, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89,
	0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x04, 0x17, 0x7b, 0x72,
	0x7e, 0x5e, 0x49, 0x6a, 0x5e, 0x89, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x8c, 0x6b, 0xa4,
	0xcf, 0xc5, 0x1c, 0x9c, 0x5c, 0x20, 0xa4, 0xc1, 0xc5, 0xe1, 0x9c, 0x5f, 0x50, 0x09, 0x36, 0x80,
	0x1b, 0x62, 0xae, 0x1e, 0x88, 0x23, 0x85, 0xcc, 0x51, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03, 0xf3,
	0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x75, 0xb0, 0x06, 0xdd, 0x8a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScpClient is the client API for Scp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScpClient interface {
	// copy file
	CopyFile(ctx context.Context, in *File, opts ...grpc.CallOption) (Scp_CopyFileClient, error)
}

type scpClient struct {
	cc *grpc.ClientConn
}

func NewScpClient(cc *grpc.ClientConn) ScpClient {
	return &scpClient{cc}
}

func (c *scpClient) CopyFile(ctx context.Context, in *File, opts ...grpc.CallOption) (Scp_CopyFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scp_serviceDesc.Streams[0], "/proto.Scp/CopyFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &scpCopyFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scp_CopyFileClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type scpCopyFileClient struct {
	grpc.ClientStream
}

func (x *scpCopyFileClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScpServer is the server API for Scp service.
type ScpServer interface {
	// copy file
	CopyFile(*File, Scp_CopyFileServer) error
}

// UnimplementedScpServer can be embedded to have forward compatible implementations.
type UnimplementedScpServer struct {
}

func (*UnimplementedScpServer) CopyFile(req *File, srv Scp_CopyFileServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}

func RegisterScpServer(s *grpc.Server, srv ScpServer) {
	s.RegisterService(&_Scp_serviceDesc, srv)
}

func _Scp_CopyFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(File)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScpServer).CopyFile(m, &scpCopyFileServer{stream})
}

type Scp_CopyFileServer interface {
	Send(*File) error
	grpc.ServerStream
}

type scpCopyFileServer struct {
	grpc.ServerStream
}

func (x *scpCopyFileServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

var _Scp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Scp",
	HandlerType: (*ScpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CopyFile",
			Handler:       _Scp_CopyFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/installer.proto",
}
